<!-- RadarGun 3.0 benchmark -->
<benchmark xmlns="urn:radargun:benchmark:3.0">

   <!-- Specifies where should the master open socket  -->
   <master bindAddress="${master.address:127.0.0.1}" port="${master.port:2103}"/>

   <!-- List of cluster configurations where the benchmark should run-->
   <clusters>
      <!-- Equivalent to <cluster size="2" /><cluster size="3" /> -->
      <scale from="2" to="3" inc="1">
         <!-- No groups defined within the cluster -->
         <cluster />
      </scale>
   </clusters>

   <!-- List of configurations of the services -->
   <configurations>
      <config name="Infinispan 5.2 - distributed">
         <!-- All slaves use the same configuration -->
         <setup plugin="infinispan52">
            <!-- You can set JVM arguments for slaves here. -->
            <vm-args>
               <memory max="4G" />
            </vm-args>
            <embedded xmlns="urn:radargun:plugins:infinispan52:3.0" file="dist-sync.xml"/>
         </setup>
      </config>
      <config name="Infinispan 6.0 - distributed">
         <setup plugin="infinispan60">
            <vm-args>
               <memory max="4G" />
            </vm-args>
            <embedded xmlns="urn:radargun:plugins:infinispan60:3.0" file="dist-sync.xml"/>
         </setup>
      </config>
   </configurations>

   <!-- Sequence of stages executed on the cluster -->
   <rg:scenario xmlns:rg="urn:radargun:benchmark:3.0"
                xmlns="urn:radargun:stages:core:3.0"
                xmlns:cache="urn:radargun:stages:cache:3.0">
      <!-- Start services on all nodes -->
      <service-start />
      <!-- Begin monitoring of CPU, memory usage and GC -->
      <jvm-monitor-start />

      <!--Preload the cache with data -->
      <cache:load num-entries="100000"/>
      <rg:repeat from="1" to="500">
         <cache:basic-operations-test-setup test-name="stress-test"
                                            num-entries="100000"
                                            max-threads="4096"
                                            ramp-up-min-waiting-threads="1024"
                                            ramp-up-min-steady-period="15s">
            <cache:get interval="2" invocations="${repeat.counter}"/>
            <cache:put interval="10" invocations="${repeat.counter}"/>
         </cache:basic-operations-test-setup>
         <test test-name="stress-test" amend-test="true" finish="false"
               duration="30s">
            <repeat-condition>
               <all>
                  <errors on="BasicOperations.Get" percent-below="1"/>
                  <!-- Get errors appear as Get.Nulls -->
                  <errors on="BasicOperations.Get.Null" percent-below="1"/>
                  <errors on="BasicOperations.Put" percent-below="1"/>
               </all>
            </repeat-condition>
         </test>
      </rg:repeat>
      <finish-test test-name="stress-test" />

      <!-- Stop JVM monitoring -->
      <jvm-monitor-stop />
   </rg:scenario>

   <!-- How the statistics are reported -->
   <reports>
      <!-- Produce CSV statistics report -->
      <reporter type="csv" />
      <!-- Produce HTML statistics report -->
      <reporter type="html" />
      <!-- Store Java-serialized version of the results that can be used to re-run the report -->
      <reporter type="serialized" />
   </reports>

</benchmark>
